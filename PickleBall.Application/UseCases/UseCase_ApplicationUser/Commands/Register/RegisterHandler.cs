using Ardalis.Result;
using AutoMapper;
using MediatR;
using Microsoft.AspNetCore.Identity;
using PickleBall.Application.Abstractions;
using PickleBall.Domain.DTOs;
using PickleBall.Domain.DTOs.ApplicationUserDtos;
using PickleBall.Domain.DTOs.Enum;
using PickleBall.Domain.Entities;

namespace PickleBall.Application.UseCases.UseCase_ApplicationUser.Commands.Register;

internal sealed class RegisterHandler(
    IAuthenticationService authenticationService,
    IUnitOfWork unitOfWork,
    IMapper mapper,
    UserManager<ApplicationUser> userManager,
    RoleManager<ApplicationRole> roleManager
) : IRequestHandler<RegisterCommand, Result<ApplicationUserDto>>
{
    private readonly IAuthenticationService _authenticationService = authenticationService;
    private readonly IUnitOfWork _unitOfWork = unitOfWork;
    private readonly IMapper _mapper = mapper;
    private readonly UserManager<ApplicationUser> _userManager = userManager;
    private readonly RoleManager<ApplicationRole> _roleManager = roleManager;

    public async Task<Result<ApplicationUserDto>> Handle(
        RegisterCommand request,
        CancellationToken cancellationToken
    )
    {
        ApplicationUserDto userDto = await AddUserToFirebaseAsync(request);

        await SetCustomClaimAsync(userDto);

        await AddUserToDBAsync(userDto, cancellationToken);

        return Result.Success(userDto);
    }

    private async Task<ApplicationUserDto> AddUserToFirebaseAsync(RegisterCommand request)
    {
        var identityId = await _authenticationService.Register(request.Email, request.Password);

        return new ApplicationUserDto
        {
            Email = request.Email,
            FirstName = request.FirstName,
            LastName = request.LastName,
            FullName = $"{request.FirstName} {request.LastName}",
            Location = request.Location,
            IdentityId = identityId,
            Role = request.Role
        };
    }

    private async Task SetCustomClaimAsync(ApplicationUserDto userDto)
    {
        if (userDto.IdentityId != null)
        {
            string role = GetUserRole(userDto);
            var claims = new Dictionary<string, object> { { "Role", role } };
            await _authenticationService.SetCustomClaims(userDto.IdentityId, claims);
        }
    }

    private string GetUserRole(ApplicationUserDto userDto)
    {
        return userDto.Role switch
        {
            Role.SystemAdmin => Role.SystemAdmin.ToString(),
            Role.Manager => Role.Manager.ToString(),
            Role.Owner => Role.Owner.ToString(),
            _ => Role.Customer.ToString(), // or any other default value that makes sense in your application
        };
    }

    private async Task AddUserToDBAsync(
        ApplicationUserDto userDto,
        CancellationToken cancellationToken
    )
    {
        var user = _mapper.Map<ApplicationUser>(userDto);
        user.UserName = userDto.Email;

        Wallet wallet =
            new()
            {
                UserId = user.Id,
                Balance = 0,
                CreatedOnUtc = DateTimeOffset.UtcNow
            };
        user.Wallets = wallet;

        try
        {
            await CreateUserAsync(user);

            if (!await IsRoleExistsAsync(userDto))
            {
                await CreateRoleAsync(userDto);
            }

            await AddUserToRoleAsync(userDto, user);

            await _unitOfWork.SaveChangesAsync(cancellationToken);

            // Update the userDto with the Id generated by the database
            var walletDto = _mapper.Map<WalletDto>(wallet);

            userDto.Id = user.Id;
            userDto.Wallet = walletDto;
        }
        catch (Exception ex)
        {
            // Log the exception (ex)
            if (userDto.IdentityId != null)
            {
                await _userManager.DeleteAsync(user);
                await _authenticationService.DeleteUser(userDto.IdentityId);
            }
            throw;
        }
    }

    private async Task CreateUserAsync(ApplicationUser user)
    {
        var userResult = await _userManager.CreateAsync(user);

        if (!userResult.Succeeded)
            throw new Exception("Failed to create user");
    }

    private async Task<bool> IsRoleExistsAsync(ApplicationUserDto userDto)
    {
        return await _roleManager.RoleExistsAsync(userDto.Role.ToString());
    }

    private async Task CreateRoleAsync(ApplicationUserDto userDto)
    {
        var roleAdded = await _roleManager.CreateAsync(
            new ApplicationRole() { Name = userDto.Role.ToString() }
        );

        if (!roleAdded.Succeeded)
            throw new Exception("Failed to create role");
    }

    private async Task AddUserToRoleAsync(ApplicationUserDto userDto, ApplicationUser user)
    {
        var roleResult = await _userManager.AddToRoleAsync(user, userDto.Role.ToString());

        if (!roleResult.Succeeded)
            throw new Exception("Failed to add user to role");
    }
}
